service: sg-code-challenge
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x

custom:
  env: ${opt:stage, 'prod'}
 
functions:
  
  index:
    name: get_user_${self:custom.env}
    environment:
        ENV: ${self:custom.env}
        TABLE_NAME: tb_user_${self:custom.env}
    handler: dist/bundle.userHandler.index
    role: readRightsRole
    events: 
      - httpApi:
          path: /user
          method: get
  create:
    name: create_user_${self:custom.env}
    environment:
      ENV: ${self:custom.env}
      TABLE_NAME: tb_user_${self:custom.env}
    handler: dist/bundle.userHandler.create
    role: writeRightsRole 
    events:
      - httpApi:
          path: /user
          method: post
  update:
    name: update_user_${self:custom.env}
    environment:
      ENV: ${self:custom.env}
      TABLE_NAME: tb_user_${self:custom.env}
    handler: dist/bundle.userHandler.update
    role: writeRightsRole 
    events:
      - httpApi:
          path: /user
          method: put
  delete:
    name: delete_user_${self:custom.env}
    environment:
      ENV: ${self:custom.env}
      TABLE_NAME: tb_user_${self:custom.env}
    handler: dist/bundle.userHandler.delete
    role: deleteRightsRole 
    events:
      - httpApi:
          path: /user
          method: delete

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tb_user_${self:custom.env}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    readRightsRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /sg/challenge/
        RoleName: ReadDynamoRole_${self:custom.env}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ReadPolicyName_${self:custom.env}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:*:*:table/tb_user_${self:custom.env}" 
    writeRightsRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /sg/challenge/
        RoleName: WriteDynamoRole_${self:custom.env}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: WritePolicyName_${self:custom.env}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: "arn:aws:dynamodb:*:*:table/tb_user_${self:custom.env}" 
    deleteRightsRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /sg/challenge/
        RoleName: DeleteDynamoRole_${self:custom.env}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DeletePolicyName_${self:custom.env}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:*:*:table/tb_user_${self:custom.env}" 